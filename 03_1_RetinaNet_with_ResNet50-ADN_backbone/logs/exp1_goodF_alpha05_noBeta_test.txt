| distributed init (rank 0): env://
Namespace(data_path='/media/data/coco', dataset='coco', weights_path='/home/hslee/INU_RISE/03_2_Loss_Develop/pretrained/exp1_goodF_alpha05_noBeta_model_12.pth', clip_grad_norm=None, model='retinanet_resnet50_adn_fpn', device='cuda', batch_size=4, epochs=26, workers=8, opt='sgd', lr=0.02, momentum=0.9, weight_decay=0.0001, norm_weight_decay=None, lr_scheduler='multisteplr', lr_step_size=8, lr_steps=[16, 22], lr_gamma=0.1, print_freq=20, subpath_alpha=0.5, beta=0.9, output_dir='.', resume='', start_epoch=0, aspect_ratio_group_factor=3, rpn_score_thresh=None, trainable_backbone_layers=None, data_augmentation='hflip', sync_bn=False, test_only=True, use_deterministic_algorithms=False, world_size=1, dist_url='env://', weights=None, weights_backbone=None, amp=False, use_copypaste=False, backend='pil', use_v2=False, rank=0, gpu=0, distributed=True, dist_backend='nccl')
Loading data
loading annotations into memory...
Done (t=7.76s)
creating index...
index created!
loading annotations into memory...
Done (t=0.24s)
creating index...
index created!
Creating data loaders
Using [0, 0.5, 0.6299605249474365, 0.7937005259840997, 1.0, 1.259921049894873, 1.5874010519681991, 2.0, inf] as bins for aspect ratio quantization
Count of instances per bin: [  104   982 24236  2332  8225 74466  5763  1158]
Creating model
trainable_backbone_layers : 5
extra_blocks: LastLevelP6P7(
  (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
)
backbone.out_channels : 256
anchor_generator.num_anchors_per_location()[0] : 9
name : backbone.body.model.conv1.weight, requires_grad : True
name : backbone.body.model.bn1.weight, requires_grad : True
name : backbone.body.model.bn1.bias, requires_grad : True
name : backbone.body.model.layer1.0.conv1.weight, requires_grad : True
name : backbone.body.model.layer1.0.bn1.weight, requires_grad : True
name : backbone.body.model.layer1.0.bn1.bias, requires_grad : True
name : backbone.body.model.layer1.0.conv2.weight, requires_grad : True
name : backbone.body.model.layer1.0.bn2.weight, requires_grad : True
name : backbone.body.model.layer1.0.bn2.bias, requires_grad : True
name : backbone.body.model.layer1.0.conv3.weight, requires_grad : True
name : backbone.body.model.layer1.0.bn3.weight, requires_grad : True
name : backbone.body.model.layer1.0.bn3.bias, requires_grad : True
name : backbone.body.model.layer1.0.downsample.0.weight, requires_grad : True
name : backbone.body.model.layer1.0.downsample.1.weight, requires_grad : True
name : backbone.body.model.layer1.0.downsample.1.bias, requires_grad : True
name : backbone.body.model.layer1.0.bn1_skip.weight, requires_grad : True
name : backbone.body.model.layer1.0.bn1_skip.bias, requires_grad : True
name : backbone.body.model.layer1.0.bn2_skip.weight, requires_grad : True
name : backbone.body.model.layer1.0.bn2_skip.bias, requires_grad : True
name : backbone.body.model.layer1.0.bn3_skip.weight, requires_grad : True
name : backbone.body.model.layer1.0.bn3_skip.bias, requires_grad : True
name : backbone.body.model.layer1.1.conv1.weight, requires_grad : True
name : backbone.body.model.layer1.1.bn1.weight, requires_grad : True
name : backbone.body.model.layer1.1.bn1.bias, requires_grad : True
name : backbone.body.model.layer1.1.conv2.weight, requires_grad : True
name : backbone.body.model.layer1.1.bn2.weight, requires_grad : True
name : backbone.body.model.layer1.1.bn2.bias, requires_grad : True
name : backbone.body.model.layer1.1.conv3.weight, requires_grad : True
name : backbone.body.model.layer1.1.bn3.weight, requires_grad : True
name : backbone.body.model.layer1.1.bn3.bias, requires_grad : True
name : backbone.body.model.layer1.1.bn1_skip.weight, requires_grad : True
name : backbone.body.model.layer1.1.bn1_skip.bias, requires_grad : True
name : backbone.body.model.layer1.1.bn2_skip.weight, requires_grad : True
name : backbone.body.model.layer1.1.bn2_skip.bias, requires_grad : True
name : backbone.body.model.layer1.1.bn3_skip.weight, requires_grad : True
name : backbone.body.model.layer1.1.bn3_skip.bias, requires_grad : True
name : backbone.body.model.layer1.2.conv1.weight, requires_grad : True
name : backbone.body.model.layer1.2.bn1.weight, requires_grad : True
name : backbone.body.model.layer1.2.bn1.bias, requires_grad : True
name : backbone.body.model.layer1.2.conv2.weight, requires_grad : True
name : backbone.body.model.layer1.2.bn2.weight, requires_grad : True
name : backbone.body.model.layer1.2.bn2.bias, requires_grad : True
name : backbone.body.model.layer1.2.conv3.weight, requires_grad : True
name : backbone.body.model.layer1.2.bn3.weight, requires_grad : True
name : backbone.body.model.layer1.2.bn3.bias, requires_grad : True
name : backbone.body.model.layer2.0.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.0.bn1.weight, requires_grad : True
name : backbone.body.model.layer2.0.bn1.bias, requires_grad : True
name : backbone.body.model.layer2.0.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.0.bn2.weight, requires_grad : True
name : backbone.body.model.layer2.0.bn2.bias, requires_grad : True
name : backbone.body.model.layer2.0.conv3.weight, requires_grad : True
name : backbone.body.model.layer2.0.bn3.weight, requires_grad : True
name : backbone.body.model.layer2.0.bn3.bias, requires_grad : True
name : backbone.body.model.layer2.0.downsample.0.weight, requires_grad : True
name : backbone.body.model.layer2.0.downsample.1.weight, requires_grad : True
name : backbone.body.model.layer2.0.downsample.1.bias, requires_grad : True
name : backbone.body.model.layer2.0.bn1_skip.weight, requires_grad : True
name : backbone.body.model.layer2.0.bn1_skip.bias, requires_grad : True
name : backbone.body.model.layer2.0.bn2_skip.weight, requires_grad : True
name : backbone.body.model.layer2.0.bn2_skip.bias, requires_grad : True
name : backbone.body.model.layer2.0.bn3_skip.weight, requires_grad : True
name : backbone.body.model.layer2.0.bn3_skip.bias, requires_grad : True
name : backbone.body.model.layer2.1.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.1.bn1.weight, requires_grad : True
name : backbone.body.model.layer2.1.bn1.bias, requires_grad : True
name : backbone.body.model.layer2.1.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.1.bn2.weight, requires_grad : True
name : backbone.body.model.layer2.1.bn2.bias, requires_grad : True
name : backbone.body.model.layer2.1.conv3.weight, requires_grad : True
name : backbone.body.model.layer2.1.bn3.weight, requires_grad : True
name : backbone.body.model.layer2.1.bn3.bias, requires_grad : True
name : backbone.body.model.layer2.1.bn1_skip.weight, requires_grad : True
name : backbone.body.model.layer2.1.bn1_skip.bias, requires_grad : True
name : backbone.body.model.layer2.1.bn2_skip.weight, requires_grad : True
name : backbone.body.model.layer2.1.bn2_skip.bias, requires_grad : True
name : backbone.body.model.layer2.1.bn3_skip.weight, requires_grad : True
name : backbone.body.model.layer2.1.bn3_skip.bias, requires_grad : True
name : backbone.body.model.layer2.2.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.2.bn1.weight, requires_grad : True
name : backbone.body.model.layer2.2.bn1.bias, requires_grad : True
name : backbone.body.model.layer2.2.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.2.bn2.weight, requires_grad : True
name : backbone.body.model.layer2.2.bn2.bias, requires_grad : True
name : backbone.body.model.layer2.2.conv3.weight, requires_grad : True
name : backbone.body.model.layer2.2.bn3.weight, requires_grad : True
name : backbone.body.model.layer2.2.bn3.bias, requires_grad : True
name : backbone.body.model.layer2.3.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.3.bn1.weight, requires_grad : True
name : backbone.body.model.layer2.3.bn1.bias, requires_grad : True
name : backbone.body.model.layer2.3.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.3.bn2.weight, requires_grad : True
name : backbone.body.model.layer2.3.bn2.bias, requires_grad : True
name : backbone.body.model.layer2.3.conv3.weight, requires_grad : True
name : backbone.body.model.layer2.3.bn3.weight, requires_grad : True
name : backbone.body.model.layer2.3.bn3.bias, requires_grad : True
name : backbone.body.model.layer3.0.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.0.bn1.weight, requires_grad : True
name : backbone.body.model.layer3.0.bn1.bias, requires_grad : True
name : backbone.body.model.layer3.0.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.0.bn2.weight, requires_grad : True
name : backbone.body.model.layer3.0.bn2.bias, requires_grad : True
name : backbone.body.model.layer3.0.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.0.bn3.weight, requires_grad : True
name : backbone.body.model.layer3.0.bn3.bias, requires_grad : True
name : backbone.body.model.layer3.0.downsample.0.weight, requires_grad : True
name : backbone.body.model.layer3.0.downsample.1.weight, requires_grad : True
name : backbone.body.model.layer3.0.downsample.1.bias, requires_grad : True
name : backbone.body.model.layer3.0.bn1_skip.weight, requires_grad : True
name : backbone.body.model.layer3.0.bn1_skip.bias, requires_grad : True
name : backbone.body.model.layer3.0.bn2_skip.weight, requires_grad : True
name : backbone.body.model.layer3.0.bn2_skip.bias, requires_grad : True
name : backbone.body.model.layer3.0.bn3_skip.weight, requires_grad : True
name : backbone.body.model.layer3.0.bn3_skip.bias, requires_grad : True
name : backbone.body.model.layer3.1.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.1.bn1.weight, requires_grad : True
name : backbone.body.model.layer3.1.bn1.bias, requires_grad : True
name : backbone.body.model.layer3.1.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.1.bn2.weight, requires_grad : True
name : backbone.body.model.layer3.1.bn2.bias, requires_grad : True
name : backbone.body.model.layer3.1.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.1.bn3.weight, requires_grad : True
name : backbone.body.model.layer3.1.bn3.bias, requires_grad : True
name : backbone.body.model.layer3.1.bn1_skip.weight, requires_grad : True
name : backbone.body.model.layer3.1.bn1_skip.bias, requires_grad : True
name : backbone.body.model.layer3.1.bn2_skip.weight, requires_grad : True
name : backbone.body.model.layer3.1.bn2_skip.bias, requires_grad : True
name : backbone.body.model.layer3.1.bn3_skip.weight, requires_grad : True
name : backbone.body.model.layer3.1.bn3_skip.bias, requires_grad : True
name : backbone.body.model.layer3.2.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.2.bn1.weight, requires_grad : True
name : backbone.body.model.layer3.2.bn1.bias, requires_grad : True
name : backbone.body.model.layer3.2.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.2.bn2.weight, requires_grad : True
name : backbone.body.model.layer3.2.bn2.bias, requires_grad : True
name : backbone.body.model.layer3.2.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.2.bn3.weight, requires_grad : True
name : backbone.body.model.layer3.2.bn3.bias, requires_grad : True
name : backbone.body.model.layer3.2.bn1_skip.weight, requires_grad : True
name : backbone.body.model.layer3.2.bn1_skip.bias, requires_grad : True
name : backbone.body.model.layer3.2.bn2_skip.weight, requires_grad : True
name : backbone.body.model.layer3.2.bn2_skip.bias, requires_grad : True
name : backbone.body.model.layer3.2.bn3_skip.weight, requires_grad : True
name : backbone.body.model.layer3.2.bn3_skip.bias, requires_grad : True
name : backbone.body.model.layer3.3.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.3.bn1.weight, requires_grad : True
name : backbone.body.model.layer3.3.bn1.bias, requires_grad : True
name : backbone.body.model.layer3.3.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.3.bn2.weight, requires_grad : True
name : backbone.body.model.layer3.3.bn2.bias, requires_grad : True
name : backbone.body.model.layer3.3.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.3.bn3.weight, requires_grad : True
name : backbone.body.model.layer3.3.bn3.bias, requires_grad : True
name : backbone.body.model.layer3.4.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.4.bn1.weight, requires_grad : True
name : backbone.body.model.layer3.4.bn1.bias, requires_grad : True
name : backbone.body.model.layer3.4.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.4.bn2.weight, requires_grad : True
name : backbone.body.model.layer3.4.bn2.bias, requires_grad : True
name : backbone.body.model.layer3.4.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.4.bn3.weight, requires_grad : True
name : backbone.body.model.layer3.4.bn3.bias, requires_grad : True
name : backbone.body.model.layer3.5.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.5.bn1.weight, requires_grad : True
name : backbone.body.model.layer3.5.bn1.bias, requires_grad : True
name : backbone.body.model.layer3.5.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.5.bn2.weight, requires_grad : True
name : backbone.body.model.layer3.5.bn2.bias, requires_grad : True
name : backbone.body.model.layer3.5.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.5.bn3.weight, requires_grad : True
name : backbone.body.model.layer3.5.bn3.bias, requires_grad : True
name : backbone.body.model.layer4.0.conv1.weight, requires_grad : True
name : backbone.body.model.layer4.0.bn1.weight, requires_grad : True
name : backbone.body.model.layer4.0.bn1.bias, requires_grad : True
name : backbone.body.model.layer4.0.conv2.weight, requires_grad : True
name : backbone.body.model.layer4.0.bn2.weight, requires_grad : True
name : backbone.body.model.layer4.0.bn2.bias, requires_grad : True
name : backbone.body.model.layer4.0.conv3.weight, requires_grad : True
name : backbone.body.model.layer4.0.bn3.weight, requires_grad : True
name : backbone.body.model.layer4.0.bn3.bias, requires_grad : True
name : backbone.body.model.layer4.0.downsample.0.weight, requires_grad : True
name : backbone.body.model.layer4.0.downsample.1.weight, requires_grad : True
name : backbone.body.model.layer4.0.downsample.1.bias, requires_grad : True
name : backbone.body.model.layer4.0.bn1_skip.weight, requires_grad : True
name : backbone.body.model.layer4.0.bn1_skip.bias, requires_grad : True
name : backbone.body.model.layer4.0.bn2_skip.weight, requires_grad : True
name : backbone.body.model.layer4.0.bn2_skip.bias, requires_grad : True
name : backbone.body.model.layer4.0.bn3_skip.weight, requires_grad : True
name : backbone.body.model.layer4.0.bn3_skip.bias, requires_grad : True
name : backbone.body.model.layer4.1.conv1.weight, requires_grad : True
name : backbone.body.model.layer4.1.bn1.weight, requires_grad : True
name : backbone.body.model.layer4.1.bn1.bias, requires_grad : True
name : backbone.body.model.layer4.1.conv2.weight, requires_grad : True
name : backbone.body.model.layer4.1.bn2.weight, requires_grad : True
name : backbone.body.model.layer4.1.bn2.bias, requires_grad : True
name : backbone.body.model.layer4.1.conv3.weight, requires_grad : True
name : backbone.body.model.layer4.1.bn3.weight, requires_grad : True
name : backbone.body.model.layer4.1.bn3.bias, requires_grad : True
name : backbone.body.model.layer4.1.bn1_skip.weight, requires_grad : True
name : backbone.body.model.layer4.1.bn1_skip.bias, requires_grad : True
name : backbone.body.model.layer4.1.bn2_skip.weight, requires_grad : True
name : backbone.body.model.layer4.1.bn2_skip.bias, requires_grad : True
name : backbone.body.model.layer4.1.bn3_skip.weight, requires_grad : True
name : backbone.body.model.layer4.1.bn3_skip.bias, requires_grad : True
name : backbone.body.model.layer4.2.conv1.weight, requires_grad : True
name : backbone.body.model.layer4.2.bn1.weight, requires_grad : True
name : backbone.body.model.layer4.2.bn1.bias, requires_grad : True
name : backbone.body.model.layer4.2.conv2.weight, requires_grad : True
name : backbone.body.model.layer4.2.bn2.weight, requires_grad : True
name : backbone.body.model.layer4.2.bn2.bias, requires_grad : True
name : backbone.body.model.layer4.2.conv3.weight, requires_grad : True
name : backbone.body.model.layer4.2.bn3.weight, requires_grad : True
name : backbone.body.model.layer4.2.bn3.bias, requires_grad : True
name : backbone.fpn.inner_blocks.0.0.weight, requires_grad : True
name : backbone.fpn.inner_blocks.0.0.bias, requires_grad : True
name : backbone.fpn.inner_blocks.1.0.weight, requires_grad : True
name : backbone.fpn.inner_blocks.1.0.bias, requires_grad : True
name : backbone.fpn.inner_blocks.2.0.weight, requires_grad : True
name : backbone.fpn.inner_blocks.2.0.bias, requires_grad : True
name : backbone.fpn.layer_blocks.0.0.weight, requires_grad : True
name : backbone.fpn.layer_blocks.0.0.bias, requires_grad : True
name : backbone.fpn.layer_blocks.1.0.weight, requires_grad : True
name : backbone.fpn.layer_blocks.1.0.bias, requires_grad : True
name : backbone.fpn.layer_blocks.2.0.weight, requires_grad : True
name : backbone.fpn.layer_blocks.2.0.bias, requires_grad : True
name : backbone.fpn.extra_blocks.p6.weight, requires_grad : True
name : backbone.fpn.extra_blocks.p6.bias, requires_grad : True
name : backbone.fpn.extra_blocks.p7.weight, requires_grad : True
name : backbone.fpn.extra_blocks.p7.bias, requires_grad : True
name : head.classification_head.conv.0.0.weight, requires_grad : True
name : head.classification_head.conv.0.0.bias, requires_grad : True
name : head.classification_head.conv.1.0.weight, requires_grad : True
name : head.classification_head.conv.1.0.bias, requires_grad : True
name : head.classification_head.conv.2.0.weight, requires_grad : True
name : head.classification_head.conv.2.0.bias, requires_grad : True
name : head.classification_head.conv.3.0.weight, requires_grad : True
name : head.classification_head.conv.3.0.bias, requires_grad : True
name : head.classification_head.cls_logits.weight, requires_grad : True
name : head.classification_head.cls_logits.bias, requires_grad : True
name : head.regression_head.conv.0.0.weight, requires_grad : True
name : head.regression_head.conv.0.0.bias, requires_grad : True
name : head.regression_head.conv.1.0.weight, requires_grad : True
name : head.regression_head.conv.1.0.bias, requires_grad : True
name : head.regression_head.conv.2.0.weight, requires_grad : True
name : head.regression_head.conv.2.0.bias, requires_grad : True
name : head.regression_head.conv.3.0.weight, requires_grad : True
name : head.regression_head.conv.3.0.bias, requires_grad : True
name : head.regression_head.bbox_reg.weight, requires_grad : True
name : head.regression_head.bbox_reg.bias, requires_grad : True
model : DistributedDataParallel(
  (module): RetinaNet(
    (backbone): BackboneWithADNFPN(
      (body): IntermediateLayerGetter(
        (model): ResNet(
          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
          (layer1): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (bn1_skip): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn2_skip): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn3_skip): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): Bottleneck(
              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (bn1_skip): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn2_skip): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn3_skip): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): Bottleneck(
              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
          )
          (layer2): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (bn1_skip): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn2_skip): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn3_skip): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (bn1_skip): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn2_skip): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn3_skip): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (3): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
          )
          (layer3): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (bn1_skip): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn2_skip): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn3_skip): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (bn1_skip): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn2_skip): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn3_skip): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (bn1_skip): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn2_skip): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn3_skip): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (3): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (4): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
            (5): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
          )
          (layer4): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (bn1_skip): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn2_skip): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn3_skip): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): Bottleneck(
              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (bn1_skip): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn2_skip): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (bn3_skip): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (2): Bottleneck(
              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
            )
          )
        )
      )
      (fpn): FeaturePyramidNetwork(
        (inner_blocks): ModuleList(
          (0): Conv2dNormActivation(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (layer_blocks): ModuleList(
          (0-2): 3 x Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (extra_blocks): LastLevelP6P7(
          (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        )
      )
    )
    (anchor_generator): AnchorGenerator()
    (head): RetinaNetHead(
      (classification_head): RetinaNetClassificationHead(
        (conv): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
        )
        (cls_logits): Conv2d(256, 819, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (regression_head): RetinaNetRegressionHead(
        (conv): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
        )
        (bbox_reg): Conv2d(256, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (transform): GeneralizedRCNNTransform(
        Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        Resize(min_size=(800,), max_size=1333, mode='bilinear')
    )
  )
)
#Params :  34094231
34094231
num_skippable_stages : 4
skip_cfg_supernet : [False, False, False, False]
skip_cfg_basenet : [True, True, True, True]
[subnet][False, False, False, False] Test:  [   0/5000]  eta: 1:34:45  model_time: 0.6504 (0.6504)  evaluator_time: 0.0073 (0.0073)  time: 1.1370  data: 0.4785  max mem: 819
[subnet][False, False, False, False] Test:  [ 100/5000]  eta: 0:03:37  model_time: 0.0151 (0.0321)  evaluator_time: 0.0046 (0.0051)  time: 0.0309  data: 0.0020  max mem: 834
[subnet][False, False, False, False] Test:  [ 200/5000]  eta: 0:02:45  model_time: 0.0151 (0.0246)  evaluator_time: 0.0036 (0.0050)  time: 0.0253  data: 0.0018  max mem: 835
[subnet][False, False, False, False] Test:  [ 300/5000]  eta: 0:02:27  model_time: 0.0152 (0.0224)  evaluator_time: 0.0038 (0.0050)  time: 0.0264  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [ 400/5000]  eta: 0:02:17  model_time: 0.0150 (0.0213)  evaluator_time: 0.0036 (0.0049)  time: 0.0272  data: 0.0019  max mem: 835
[subnet][False, False, False, False] Test:  [ 500/5000]  eta: 0:02:07  model_time: 0.0151 (0.0202)  evaluator_time: 0.0041 (0.0049)  time: 0.0223  data: 0.0016  max mem: 835
[subnet][False, False, False, False] Test:  [ 600/5000]  eta: 0:02:02  model_time: 0.0146 (0.0196)  evaluator_time: 0.0043 (0.0050)  time: 0.0247  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [ 700/5000]  eta: 0:01:56  model_time: 0.0152 (0.0191)  evaluator_time: 0.0034 (0.0050)  time: 0.0213  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [ 800/5000]  eta: 0:01:51  model_time: 0.0150 (0.0186)  evaluator_time: 0.0048 (0.0050)  time: 0.0230  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [ 900/5000]  eta: 0:01:47  model_time: 0.0149 (0.0183)  evaluator_time: 0.0036 (0.0050)  time: 0.0220  data: 0.0015  max mem: 835
[subnet][False, False, False, False] Test:  [1000/5000]  eta: 0:01:43  model_time: 0.0154 (0.0180)  evaluator_time: 0.0028 (0.0049)  time: 0.0249  data: 0.0018  max mem: 835
[subnet][False, False, False, False] Test:  [1100/5000]  eta: 0:01:44  model_time: 0.0148 (0.0178)  evaluator_time: 0.0048 (0.0062)  time: 0.0253  data: 0.0018  max mem: 835
[subnet][False, False, False, False] Test:  [1200/5000]  eta: 0:01:41  model_time: 0.0152 (0.0176)  evaluator_time: 0.0045 (0.0061)  time: 0.0233  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [1300/5000]  eta: 0:01:37  model_time: 0.0147 (0.0174)  evaluator_time: 0.0031 (0.0060)  time: 0.0216  data: 0.0018  max mem: 835
[subnet][False, False, False, False] Test:  [1400/5000]  eta: 0:01:33  model_time: 0.0150 (0.0173)  evaluator_time: 0.0034 (0.0060)  time: 0.0228  data: 0.0016  max mem: 835
[subnet][False, False, False, False] Test:  [1500/5000]  eta: 0:01:30  model_time: 0.0148 (0.0172)  evaluator_time: 0.0037 (0.0059)  time: 0.0222  data: 0.0018  max mem: 835
[subnet][False, False, False, False] Test:  [1600/5000]  eta: 0:01:27  model_time: 0.0154 (0.0170)  evaluator_time: 0.0044 (0.0059)  time: 0.0248  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [1700/5000]  eta: 0:01:24  model_time: 0.0153 (0.0170)  evaluator_time: 0.0034 (0.0058)  time: 0.0254  data: 0.0016  max mem: 835
[subnet][False, False, False, False] Test:  [1800/5000]  eta: 0:01:21  model_time: 0.0152 (0.0169)  evaluator_time: 0.0033 (0.0057)  time: 0.0275  data: 0.0016  max mem: 835
[subnet][False, False, False, False] Test:  [1900/5000]  eta: 0:01:18  model_time: 0.0152 (0.0168)  evaluator_time: 0.0021 (0.0057)  time: 0.0206  data: 0.0014  max mem: 835
[subnet][False, False, False, False] Test:  [2000/5000]  eta: 0:01:15  model_time: 0.0153 (0.0167)  evaluator_time: 0.0038 (0.0057)  time: 0.0228  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [2100/5000]  eta: 0:01:12  model_time: 0.0151 (0.0167)  evaluator_time: 0.0044 (0.0056)  time: 0.0232  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [2200/5000]  eta: 0:01:09  model_time: 0.0152 (0.0166)  evaluator_time: 0.0029 (0.0056)  time: 0.0221  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [2300/5000]  eta: 0:01:06  model_time: 0.0148 (0.0166)  evaluator_time: 0.0037 (0.0056)  time: 0.0216  data: 0.0018  max mem: 835
[subnet][False, False, False, False] Test:  [2400/5000]  eta: 0:01:04  model_time: 0.0150 (0.0165)  evaluator_time: 0.0052 (0.0055)  time: 0.0231  data: 0.0018  max mem: 835
[subnet][False, False, False, False] Test:  [2500/5000]  eta: 0:01:01  model_time: 0.0146 (0.0165)  evaluator_time: 0.0033 (0.0055)  time: 0.0226  data: 0.0018  max mem: 835
[subnet][False, False, False, False] Test:  [2600/5000]  eta: 0:00:58  model_time: 0.0148 (0.0164)  evaluator_time: 0.0039 (0.0055)  time: 0.0223  data: 0.0018  max mem: 835
[subnet][False, False, False, False] Test:  [2700/5000]  eta: 0:00:56  model_time: 0.0151 (0.0164)  evaluator_time: 0.0036 (0.0055)  time: 0.0215  data: 0.0016  max mem: 835
[subnet][False, False, False, False] Test:  [2800/5000]  eta: 0:00:53  model_time: 0.0150 (0.0163)  evaluator_time: 0.0046 (0.0055)  time: 0.0224  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [2900/5000]  eta: 0:00:51  model_time: 0.0151 (0.0163)  evaluator_time: 0.0044 (0.0055)  time: 0.0230  data: 0.0019  max mem: 835
[subnet][False, False, False, False] Test:  [3000/5000]  eta: 0:00:48  model_time: 0.0150 (0.0163)  evaluator_time: 0.0039 (0.0055)  time: 0.0216  data: 0.0015  max mem: 835
[subnet][False, False, False, False] Test:  [3100/5000]  eta: 0:00:46  model_time: 0.0148 (0.0162)  evaluator_time: 0.0028 (0.0054)  time: 0.0216  data: 0.0019  max mem: 835
[subnet][False, False, False, False] Test:  [3200/5000]  eta: 0:00:43  model_time: 0.0151 (0.0162)  evaluator_time: 0.0039 (0.0054)  time: 0.0222  data: 0.0018  max mem: 835
[subnet][False, False, False, False] Test:  [3300/5000]  eta: 0:00:41  model_time: 0.0154 (0.0162)  evaluator_time: 0.0043 (0.0054)  time: 0.0232  data: 0.0016  max mem: 835
[subnet][False, False, False, False] Test:  [3400/5000]  eta: 0:00:39  model_time: 0.0147 (0.0161)  evaluator_time: 0.0034 (0.0059)  time: 0.0213  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [3500/5000]  eta: 0:00:36  model_time: 0.0149 (0.0161)  evaluator_time: 0.0028 (0.0058)  time: 0.0218  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [3600/5000]  eta: 0:00:34  model_time: 0.0148 (0.0161)  evaluator_time: 0.0038 (0.0058)  time: 0.0237  data: 0.0018  max mem: 835
[subnet][False, False, False, False] Test:  [3700/5000]  eta: 0:00:31  model_time: 0.0153 (0.0161)  evaluator_time: 0.0039 (0.0058)  time: 0.0227  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [3800/5000]  eta: 0:00:29  model_time: 0.0153 (0.0160)  evaluator_time: 0.0047 (0.0058)  time: 0.0243  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [3900/5000]  eta: 0:00:26  model_time: 0.0147 (0.0160)  evaluator_time: 0.0036 (0.0057)  time: 0.0212  data: 0.0015  max mem: 835
[subnet][False, False, False, False] Test:  [4000/5000]  eta: 0:00:24  model_time: 0.0150 (0.0160)  evaluator_time: 0.0033 (0.0057)  time: 0.0213  data: 0.0016  max mem: 835
[subnet][False, False, False, False] Test:  [4100/5000]  eta: 0:00:21  model_time: 0.0153 (0.0160)  evaluator_time: 0.0039 (0.0057)  time: 0.0232  data: 0.0019  max mem: 835
[subnet][False, False, False, False] Test:  [4200/5000]  eta: 0:00:19  model_time: 0.0149 (0.0159)  evaluator_time: 0.0038 (0.0057)  time: 0.0221  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [4300/5000]  eta: 0:00:16  model_time: 0.0148 (0.0159)  evaluator_time: 0.0044 (0.0057)  time: 0.0228  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [4400/5000]  eta: 0:00:14  model_time: 0.0149 (0.0159)  evaluator_time: 0.0052 (0.0057)  time: 0.0236  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [4500/5000]  eta: 0:00:12  model_time: 0.0149 (0.0159)  evaluator_time: 0.0044 (0.0056)  time: 0.0236  data: 0.0016  max mem: 835
[subnet][False, False, False, False] Test:  [4600/5000]  eta: 0:00:09  model_time: 0.0153 (0.0159)  evaluator_time: 0.0041 (0.0056)  time: 0.0217  data: 0.0014  max mem: 835
[subnet][False, False, False, False] Test:  [4700/5000]  eta: 0:00:07  model_time: 0.0154 (0.0158)  evaluator_time: 0.0044 (0.0056)  time: 0.0236  data: 0.0016  max mem: 835
[subnet][False, False, False, False] Test:  [4800/5000]  eta: 0:00:04  model_time: 0.0150 (0.0158)  evaluator_time: 0.0044 (0.0056)  time: 0.0227  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test:  [4900/5000]  eta: 0:00:02  model_time: 0.0155 (0.0158)  evaluator_time: 0.0047 (0.0056)  time: 0.0236  data: 0.0019  max mem: 835
[subnet][False, False, False, False] Test:  [4999/5000]  eta: 0:00:00  model_time: 0.0151 (0.0158)  evaluator_time: 0.0033 (0.0056)  time: 0.0221  data: 0.0017  max mem: 835
[subnet][False, False, False, False] Test: Total time: 0:01:59 (0.0239 s / it)
Averaged stats: model_time: 0.0151 (0.0158)  evaluator_time: 0.0033 (0.0056)
Accumulating evaluation results...
DONE (t=7.09s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.367
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.556
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.388
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.199
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.400
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.493
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.318
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.516
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.558
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.375
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.599
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.714
[subnet][True, True, True, True] Test:  [   0/5000]  eta: 0:42:22  model_time: 0.0195 (0.0195)  evaluator_time: 0.0120 (0.0120)  time: 0.5084  data: 0.4762  max mem: 835
[subnet][True, True, True, True] Test:  [ 100/5000]  eta: 0:02:10  model_time: 0.0133 (0.0136)  evaluator_time: 0.0057 (0.0058)  time: 0.0219  data: 0.0018  max mem: 835
[subnet][True, True, True, True] Test:  [ 200/5000]  eta: 0:01:54  model_time: 0.0130 (0.0134)  evaluator_time: 0.0039 (0.0056)  time: 0.0207  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [ 300/5000]  eta: 0:01:47  model_time: 0.0131 (0.0133)  evaluator_time: 0.0042 (0.0055)  time: 0.0214  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [ 400/5000]  eta: 0:02:00  model_time: 0.0131 (0.0170)  evaluator_time: 0.0039 (0.0054)  time: 0.0193  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [ 500/5000]  eta: 0:01:52  model_time: 0.0133 (0.0162)  evaluator_time: 0.0043 (0.0053)  time: 0.0216  data: 0.0019  max mem: 835
[subnet][True, True, True, True] Test:  [ 600/5000]  eta: 0:01:47  model_time: 0.0126 (0.0157)  evaluator_time: 0.0043 (0.0054)  time: 0.0195  data: 0.0015  max mem: 835
[subnet][True, True, True, True] Test:  [ 700/5000]  eta: 0:01:42  model_time: 0.0131 (0.0153)  evaluator_time: 0.0039 (0.0054)  time: 0.0194  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [ 800/5000]  eta: 0:01:38  model_time: 0.0133 (0.0151)  evaluator_time: 0.0050 (0.0054)  time: 0.0216  data: 0.0018  max mem: 835
[subnet][True, True, True, True] Test:  [ 900/5000]  eta: 0:01:35  model_time: 0.0130 (0.0149)  evaluator_time: 0.0037 (0.0054)  time: 0.0208  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [1000/5000]  eta: 0:01:31  model_time: 0.0129 (0.0147)  evaluator_time: 0.0034 (0.0053)  time: 0.0197  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [1100/5000]  eta: 0:01:28  model_time: 0.0126 (0.0145)  evaluator_time: 0.0046 (0.0053)  time: 0.0201  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [1200/5000]  eta: 0:01:25  model_time: 0.0133 (0.0144)  evaluator_time: 0.0057 (0.0053)  time: 0.0225  data: 0.0018  max mem: 835
[subnet][True, True, True, True] Test:  [1300/5000]  eta: 0:01:23  model_time: 0.0130 (0.0143)  evaluator_time: 0.0029 (0.0053)  time: 0.0202  data: 0.0018  max mem: 835
[subnet][True, True, True, True] Test:  [1400/5000]  eta: 0:01:20  model_time: 0.0128 (0.0142)  evaluator_time: 0.0035 (0.0053)  time: 0.0206  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [1500/5000]  eta: 0:01:17  model_time: 0.0127 (0.0141)  evaluator_time: 0.0037 (0.0053)  time: 0.0198  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [1600/5000]  eta: 0:01:15  model_time: 0.0131 (0.0141)  evaluator_time: 0.0050 (0.0053)  time: 0.0225  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [1700/5000]  eta: 0:01:12  model_time: 0.0134 (0.0140)  evaluator_time: 0.0040 (0.0053)  time: 0.0219  data: 0.0019  max mem: 835
[subnet][True, True, True, True] Test:  [1800/5000]  eta: 0:01:10  model_time: 0.0129 (0.0140)  evaluator_time: 0.0042 (0.0053)  time: 0.0200  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [1900/5000]  eta: 0:01:07  model_time: 0.0130 (0.0139)  evaluator_time: 0.0024 (0.0053)  time: 0.0193  data: 0.0018  max mem: 835
[subnet][True, True, True, True] Test:  [2000/5000]  eta: 0:01:05  model_time: 0.0130 (0.0139)  evaluator_time: 0.0039 (0.0053)  time: 0.0205  data: 0.0015  max mem: 835
[subnet][True, True, True, True] Test:  [2100/5000]  eta: 0:01:03  model_time: 0.0130 (0.0138)  evaluator_time: 0.0041 (0.0053)  time: 0.0209  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [2200/5000]  eta: 0:01:00  model_time: 0.0135 (0.0138)  evaluator_time: 0.0037 (0.0053)  time: 0.0210  data: 0.0019  max mem: 835
[subnet][True, True, True, True] Test:  [2300/5000]  eta: 0:00:58  model_time: 0.0130 (0.0138)  evaluator_time: 0.0047 (0.0053)  time: 0.0201  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [2400/5000]  eta: 0:00:57  model_time: 0.0129 (0.0137)  evaluator_time: 0.0054 (0.0059)  time: 0.0933  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [2500/5000]  eta: 0:00:55  model_time: 0.0126 (0.0137)  evaluator_time: 0.0039 (0.0058)  time: 0.0204  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [2600/5000]  eta: 0:00:53  model_time: 0.0130 (0.0137)  evaluator_time: 0.0039 (0.0058)  time: 0.0204  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [2700/5000]  eta: 0:00:50  model_time: 0.0130 (0.0137)  evaluator_time: 0.0041 (0.0058)  time: 0.0193  data: 0.0015  max mem: 835
[subnet][True, True, True, True] Test:  [2800/5000]  eta: 0:00:48  model_time: 0.0130 (0.0137)  evaluator_time: 0.0044 (0.0058)  time: 0.0210  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [2900/5000]  eta: 0:00:46  model_time: 0.0130 (0.0136)  evaluator_time: 0.0045 (0.0058)  time: 0.0204  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [3000/5000]  eta: 0:00:43  model_time: 0.0130 (0.0136)  evaluator_time: 0.0039 (0.0058)  time: 0.0199  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [3100/5000]  eta: 0:00:41  model_time: 0.0129 (0.0136)  evaluator_time: 0.0032 (0.0057)  time: 0.0199  data: 0.0018  max mem: 835
[subnet][True, True, True, True] Test:  [3200/5000]  eta: 0:00:39  model_time: 0.0128 (0.0136)  evaluator_time: 0.0038 (0.0057)  time: 0.0197  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [3300/5000]  eta: 0:00:37  model_time: 0.0133 (0.0136)  evaluator_time: 0.0048 (0.0057)  time: 0.0215  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [3400/5000]  eta: 0:00:34  model_time: 0.0129 (0.0135)  evaluator_time: 0.0042 (0.0057)  time: 0.0203  data: 0.0020  max mem: 835
[subnet][True, True, True, True] Test:  [3500/5000]  eta: 0:00:32  model_time: 0.0128 (0.0135)  evaluator_time: 0.0031 (0.0057)  time: 0.0197  data: 0.0018  max mem: 835
[subnet][True, True, True, True] Test:  [3600/5000]  eta: 0:00:30  model_time: 0.0128 (0.0135)  evaluator_time: 0.0042 (0.0057)  time: 0.0217  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [3700/5000]  eta: 0:00:28  model_time: 0.0132 (0.0135)  evaluator_time: 0.0045 (0.0057)  time: 0.0214  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [3800/5000]  eta: 0:00:26  model_time: 0.0131 (0.0135)  evaluator_time: 0.0047 (0.0057)  time: 0.0218  data: 0.0015  max mem: 835
[subnet][True, True, True, True] Test:  [3900/5000]  eta: 0:00:23  model_time: 0.0130 (0.0135)  evaluator_time: 0.0038 (0.0057)  time: 0.0196  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [4000/5000]  eta: 0:00:21  model_time: 0.0128 (0.0135)  evaluator_time: 0.0037 (0.0056)  time: 0.0197  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [4100/5000]  eta: 0:00:19  model_time: 0.0132 (0.0135)  evaluator_time: 0.0040 (0.0056)  time: 0.0209  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [4200/5000]  eta: 0:00:17  model_time: 0.0129 (0.0135)  evaluator_time: 0.0041 (0.0056)  time: 0.0203  data: 0.0018  max mem: 835
[subnet][True, True, True, True] Test:  [4300/5000]  eta: 0:00:15  model_time: 0.0132 (0.0134)  evaluator_time: 0.0049 (0.0056)  time: 0.0212  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [4400/5000]  eta: 0:00:12  model_time: 0.0131 (0.0134)  evaluator_time: 0.0058 (0.0056)  time: 0.0217  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [4500/5000]  eta: 0:00:10  model_time: 0.0128 (0.0134)  evaluator_time: 0.0048 (0.0056)  time: 0.0217  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [4600/5000]  eta: 0:00:08  model_time: 0.0133 (0.0134)  evaluator_time: 0.0045 (0.0056)  time: 0.0211  data: 0.0018  max mem: 835
[subnet][True, True, True, True] Test:  [4700/5000]  eta: 0:00:06  model_time: 0.0131 (0.0134)  evaluator_time: 0.0047 (0.0056)  time: 0.0217  data: 0.0020  max mem: 835
[subnet][True, True, True, True] Test:  [4800/5000]  eta: 0:00:04  model_time: 0.0131 (0.0134)  evaluator_time: 0.0042 (0.0056)  time: 0.0202  data: 0.0016  max mem: 835
[subnet][True, True, True, True] Test:  [4900/5000]  eta: 0:00:02  model_time: 0.0132 (0.0134)  evaluator_time: 0.0044 (0.0056)  time: 0.0206  data: 0.0017  max mem: 835
[subnet][True, True, True, True] Test:  [4999/5000]  eta: 0:00:00  model_time: 0.0131 (0.0134)  evaluator_time: 0.0036 (0.0056)  time: 0.0210  data: 0.0018  max mem: 835
[subnet][True, True, True, True] Test: Total time: 0:01:49 (0.0218 s / it)
Averaged stats: model_time: 0.0131 (0.0134)  evaluator_time: 0.0036 (0.0056)
Accumulating evaluation results...
DONE (t=7.43s).
IoU metric: bbox
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.343
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.531
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.364
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.190
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.376
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.458
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.306
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.500
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.542
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.356
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.585
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.692
