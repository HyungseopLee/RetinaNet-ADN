[2024-04-26 22:29:06,174] torch.distributed.run: [WARNING] 
[2024-04-26 22:29:06,174] torch.distributed.run: [WARNING] *****************************************
[2024-04-26 22:29:06,174] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-04-26 22:29:06,174] torch.distributed.run: [WARNING] *****************************************
| distributed init (rank 0): env://
| distributed init (rank 1): env://
| distributed init (rank 3): env://
| distributed init (rank 2): env://
Namespace(data_path='/media/data/coco', dataset='coco', weights_path=None, clip_grad_norm=None, model='retinanet_resnet50_adn_fpn', device='cuda', batch_size=4, epochs=13, workers=8, opt='sgd', lr=0.01, momentum=0.9, weight_decay=0.0001, norm_weight_decay=None, lr_scheduler='multisteplr', lr_step_size=8, lr_steps=[8, 11], lr_gamma=0.1, print_freq=20, subpath_alpha=0.7, beta=0.9, output_dir='.', resume='', start_epoch=0, aspect_ratio_group_factor=3, rpn_score_thresh=None, trainable_backbone_layers=None, data_augmentation='hflip', sync_bn=False, test_only=False, use_deterministic_algorithms=False, world_size=4, dist_url='env://', weights=None, weights_backbone='/home/hslee/INU_RISE/02_AdaptiveDepthNetwork/pretrained/resnet50_adn_model_145.pth', amp=False, use_copypaste=False, backend='pil', use_v2=False, rank=0, gpu=0, distributed=True, dist_backend='nccl')
Loading data
loading annotations into memory...
Done (t=8.41s)
creating index...
index created!
loading annotations into memory...
Done (t=0.26s)
creating index...
index created!
Creating data loaders
Using [0, 0.5, 0.6299605249474365, 0.7937005259840997, 1.0, 1.259921049894873, 1.5874010519681991, 2.0, inf] as bins for aspect ratio quantization
Count of instances per bin: [  104   982 24236  2332  8225 74466  5763  1158]
Creating model
Loading weights from /home/hslee/INU_RISE/02_AdaptiveDepthNetwork/pretrained/resnet50_adn_model_145.pth
trainable_backbone_layers : 3
extra_blocks: LastLevelP6P7(
  (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
)
backbone.out_channels : 256
anchor_generator.num_anchors_per_location()[0] : 9
name : backbone.body.model.conv1.weight, requires_grad : False
name : backbone.body.model.layer1.0.conv1.weight, requires_grad : False
name : backbone.body.model.layer1.0.conv2.weight, requires_grad : False
name : backbone.body.model.layer1.0.conv3.weight, requires_grad : False
name : backbone.body.model.layer1.0.downsample.0.weight, requires_grad : False
name : backbone.body.model.layer1.1.conv1.weight, requires_grad : False
name : backbone.body.model.layer1.1.conv2.weight, requires_grad : False
name : backbone.body.model.layer1.1.conv3.weight, requires_grad : False
name : backbone.body.model.layer1.2.conv1.weight, requires_grad : False
name : backbone.body.model.layer1.2.conv2.weight, requires_grad : False
name : backbone.body.model.layer1.2.conv3.weight, requires_grad : False
name : backbone.body.model.layer2.0.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.0.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.0.conv3.weight, requires_grad : True
name : backbone.body.model.layer2.0.downsample.0.weight, requires_grad : True
name : backbone.body.model.layer2.1.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.1.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.1.conv3.weight, requires_grad : True
name : backbone.body.model.layer2.2.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.2.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.2.conv3.weight, requires_grad : True
name : backbone.body.model.layer2.3.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.3.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.3.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.0.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.0.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.0.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.0.downsample.0.weight, requires_grad : True
name : backbone.body.model.layer3.1.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.1.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.1.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.2.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.2.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.2.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.3.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.3.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.3.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.4.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.4.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.4.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.5.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.5.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.5.conv3.weight, requires_grad : True
name : backbone.body.model.layer4.0.conv1.weight, requires_grad : True
name : backbone.body.model.layer4.0.conv2.weight, requires_grad : True
name : backbone.body.model.layer4.0.conv3.weight, requires_grad : True
name : backbone.body.model.layer4.0.downsample.0.weight, requires_grad : True
name : backbone.body.model.layer4.1.conv1.weight, requires_grad : True
name : backbone.body.model.layer4.1.conv2.weight, requires_grad : True
name : backbone.body.model.layer4.1.conv3.weight, requires_grad : True
name : backbone.body.model.layer4.2.conv1.weight, requires_grad : True
name : backbone.body.model.layer4.2.conv2.weight, requires_grad : True
name : backbone.body.model.layer4.2.conv3.weight, requires_grad : True
name : backbone.fpn.inner_blocks.0.0.weight, requires_grad : True
name : backbone.fpn.inner_blocks.0.0.bias, requires_grad : True
name : backbone.fpn.inner_blocks.1.0.weight, requires_grad : True
name : backbone.fpn.inner_blocks.1.0.bias, requires_grad : True
name : backbone.fpn.inner_blocks.2.0.weight, requires_grad : True
name : backbone.fpn.inner_blocks.2.0.bias, requires_grad : True
name : backbone.fpn.layer_blocks.0.0.weight, requires_grad : True
name : backbone.fpn.layer_blocks.0.0.bias, requires_grad : True
name : backbone.fpn.layer_blocks.1.0.weight, requires_grad : True
name : backbone.fpn.layer_blocks.1.0.bias, requires_grad : True
name : backbone.fpn.layer_blocks.2.0.weight, requires_grad : True
name : backbone.fpn.layer_blocks.2.0.bias, requires_grad : True
name : backbone.fpn.extra_blocks.p6.weight, requires_grad : True
name : backbone.fpn.extra_blocks.p6.bias, requires_grad : True
name : backbone.fpn.extra_blocks.p7.weight, requires_grad : True
name : backbone.fpn.extra_blocks.p7.bias, requires_grad : True
name : head.classification_head.conv.0.0.weight, requires_grad : True
name : head.classification_head.conv.0.0.bias, requires_grad : True
name : head.classification_head.conv.1.0.weight, requires_grad : True
name : head.classification_head.conv.1.0.bias, requires_grad : True
name : head.classification_head.conv.2.0.weight, requires_grad : True
name : head.classification_head.conv.2.0.bias, requires_grad : True
name : head.classification_head.conv.3.0.weight, requires_grad : True
name : head.classification_head.conv.3.0.bias, requires_grad : True
name : head.classification_head.cls_logits.weight, requires_grad : True
name : head.classification_head.cls_logits.bias, requires_grad : True
name : head.regression_head.conv.0.0.weight, requires_grad : True
name : head.regression_head.conv.0.0.bias, requires_grad : True
name : head.regression_head.conv.1.0.weight, requires_grad : True
name : head.regression_head.conv.1.0.bias, requires_grad : True
name : head.regression_head.conv.2.0.weight, requires_grad : True
name : head.regression_head.conv.2.0.bias, requires_grad : True
name : head.regression_head.conv.3.0.weight, requires_grad : True
name : head.regression_head.conv.3.0.bias, requires_grad : True
name : head.regression_head.bbox_reg.weight, requires_grad : True
name : head.regression_head.bbox_reg.bias, requires_grad : True
model : DistributedDataParallel(
  (module): RetinaNet(
    (backbone): BackboneWithADNFPN(
      (body): IntermediateLayerGetter(
        (model): ResNet(
          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
          (bn1): FrozenBatchNorm2d(64, eps=1e-05)
          (relu): ReLU(inplace=True)
          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
          (layer1): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(64, eps=1e-05)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(64, eps=1e-05)
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(256, eps=1e-05)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): FrozenBatchNorm2d(256, eps=1e-05)
              )
              (bn1_skip): FrozenBatchNorm2d(64, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(64, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(256, eps=1e-05)
            )
            (1): Bottleneck(
              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(64, eps=1e-05)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(64, eps=1e-05)
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(256, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(64, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(64, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(256, eps=1e-05)
            )
            (2): Bottleneck(
              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(64, eps=1e-05)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(64, eps=1e-05)
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(256, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
          )
          (layer2): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(128, eps=1e-05)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(128, eps=1e-05)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(512, eps=1e-05)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): FrozenBatchNorm2d(512, eps=1e-05)
              )
              (bn1_skip): FrozenBatchNorm2d(128, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(128, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(512, eps=1e-05)
            )
            (1): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(128, eps=1e-05)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(128, eps=1e-05)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(512, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(128, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(128, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(512, eps=1e-05)
            )
            (2): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(128, eps=1e-05)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(128, eps=1e-05)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(512, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
            (3): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(128, eps=1e-05)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(128, eps=1e-05)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(512, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
          )
          (layer3): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): FrozenBatchNorm2d(1024, eps=1e-05)
              )
              (bn1_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(1024, eps=1e-05)
            )
            (1): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(1024, eps=1e-05)
            )
            (2): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(1024, eps=1e-05)
            )
            (3): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
            (4): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
            (5): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
          )
          (layer4): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(512, eps=1e-05)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(512, eps=1e-05)
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(2048, eps=1e-05)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): FrozenBatchNorm2d(2048, eps=1e-05)
              )
              (bn1_skip): FrozenBatchNorm2d(512, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(512, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(2048, eps=1e-05)
            )
            (1): Bottleneck(
              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(512, eps=1e-05)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(512, eps=1e-05)
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(2048, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(512, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(512, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(2048, eps=1e-05)
            )
            (2): Bottleneck(
              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(512, eps=1e-05)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(512, eps=1e-05)
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(2048, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
          )
        )
      )
      (fpn): FeaturePyramidNetwork(
        (inner_blocks): ModuleList(
          (0): Conv2dNormActivation(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (layer_blocks): ModuleList(
          (0-2): 3 x Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (extra_blocks): LastLevelP6P7(
          (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        )
      )
    )
    (anchor_generator): AnchorGenerator()
    (head): RetinaNetHead(
      (classification_head): RetinaNetClassificationHead(
        (conv): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
        )
        (cls_logits): Conv2d(256, 819, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (regression_head): RetinaNetRegressionHead(
        (conv): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
        )
        (bbox_reg): Conv2d(256, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (transform): GeneralizedRCNNTransform(
        Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        Resize(min_size=(800,), max_size=1333, mode='bilinear')
    )
  )
)
#Params :  34014999
33792599
num_skippable_stages : 4
skip_cfg_supernet : [False, False, False, False]
skip_cfg_basenet : [True, True, True, True]
Start training
Epoch: [0]  [   0/7329]  eta: 4:10:07  lr: 0.000020  real_losses_super: 2.1175 (2.1175)  real_losses_base: 2.1175 (2.1175)  losses_base: 1.9065 (1.9065)  kd_loss: 0.0077 (0.0077)  time: 2.0477  data: 0.7904  max mem: 9774
Epoch: [0]  [  20/7329]  eta: 1:00:33  lr: 0.000220  real_losses_super: 1.9554 (2.0053)  real_losses_base: 1.9548 (2.0052)  losses_base: 1.7605 (1.8056)  kd_loss: 0.0093 (0.0093)  time: 0.4196  data: 0.0069  max mem: 11213
Epoch: [0]  [  40/7329]  eta: 0:54:47  lr: 0.000420  real_losses_super: 1.9968 (2.0278)  real_losses_base: 1.9969 (2.0277)  losses_base: 1.7982 (1.8259)  kd_loss: 0.0088 (0.0094)  time: 0.4025  data: 0.0046  max mem: 11213
[2024-04-26 22:30:11,607] torch.distributed.run: [WARNING] 
[2024-04-26 22:30:11,607] torch.distributed.run: [WARNING] *****************************************
[2024-04-26 22:30:11,607] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-04-26 22:30:11,607] torch.distributed.run: [WARNING] *****************************************
| distributed init (rank 0): env://
| distributed init (rank 1): env://
| distributed init (rank 3): env://
| distributed init (rank 2): env://
Namespace(data_path='/media/data/coco', dataset='coco', weights_path=None, clip_grad_norm=None, model='retinanet_resnet50_adn_fpn', device='cuda', batch_size=4, epochs=13, workers=8, opt='sgd', lr=0.01, momentum=0.9, weight_decay=0.0001, norm_weight_decay=None, lr_scheduler='multisteplr', lr_step_size=8, lr_steps=[8, 11], lr_gamma=0.1, print_freq=20, subpath_alpha=0.7, beta=0.9, output_dir='.', resume='', start_epoch=0, aspect_ratio_group_factor=3, rpn_score_thresh=None, trainable_backbone_layers=None, data_augmentation='hflip', sync_bn=False, test_only=False, use_deterministic_algorithms=False, world_size=4, dist_url='env://', weights=None, weights_backbone='/home/hslee/INU_RISE/02_AdaptiveDepthNetwork/pretrained/resnet50_adn_model_145.pth', amp=False, use_copypaste=False, backend='pil', use_v2=False, rank=0, gpu=0, distributed=True, dist_backend='nccl')
Loading data
loading annotations into memory...
Done (t=8.40s)
creating index...
index created!
loading annotations into memory...
Done (t=0.26s)
creating index...
index created!
Creating data loaders
Using [0, 0.5, 0.6299605249474365, 0.7937005259840997, 1.0, 1.259921049894873, 1.5874010519681991, 2.0, inf] as bins for aspect ratio quantization
Count of instances per bin: [  104   982 24236  2332  8225 74466  5763  1158]
Creating model
Loading weights from /home/hslee/INU_RISE/02_AdaptiveDepthNetwork/pretrained/resnet50_adn_model_145.pth
trainable_backbone_layers : 3
extra_blocks: LastLevelP6P7(
  (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
)
backbone.out_channels : 256
anchor_generator.num_anchors_per_location()[0] : 9
name : backbone.body.model.conv1.weight, requires_grad : False
name : backbone.body.model.layer1.0.conv1.weight, requires_grad : False
name : backbone.body.model.layer1.0.conv2.weight, requires_grad : False
name : backbone.body.model.layer1.0.conv3.weight, requires_grad : False
name : backbone.body.model.layer1.0.downsample.0.weight, requires_grad : False
name : backbone.body.model.layer1.1.conv1.weight, requires_grad : False
name : backbone.body.model.layer1.1.conv2.weight, requires_grad : False
name : backbone.body.model.layer1.1.conv3.weight, requires_grad : False
name : backbone.body.model.layer1.2.conv1.weight, requires_grad : False
name : backbone.body.model.layer1.2.conv2.weight, requires_grad : False
name : backbone.body.model.layer1.2.conv3.weight, requires_grad : False
name : backbone.body.model.layer2.0.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.0.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.0.conv3.weight, requires_grad : True
name : backbone.body.model.layer2.0.downsample.0.weight, requires_grad : True
name : backbone.body.model.layer2.1.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.1.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.1.conv3.weight, requires_grad : True
name : backbone.body.model.layer2.2.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.2.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.2.conv3.weight, requires_grad : True
name : backbone.body.model.layer2.3.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.3.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.3.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.0.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.0.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.0.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.0.downsample.0.weight, requires_grad : True
name : backbone.body.model.layer3.1.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.1.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.1.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.2.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.2.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.2.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.3.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.3.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.3.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.4.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.4.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.4.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.5.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.5.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.5.conv3.weight, requires_grad : True
name : backbone.body.model.layer4.0.conv1.weight, requires_grad : True
name : backbone.body.model.layer4.0.conv2.weight, requires_grad : True
name : backbone.body.model.layer4.0.conv3.weight, requires_grad : True
name : backbone.body.model.layer4.0.downsample.0.weight, requires_grad : True
name : backbone.body.model.layer4.1.conv1.weight, requires_grad : True
name : backbone.body.model.layer4.1.conv2.weight, requires_grad : True
name : backbone.body.model.layer4.1.conv3.weight, requires_grad : True
name : backbone.body.model.layer4.2.conv1.weight, requires_grad : True
name : backbone.body.model.layer4.2.conv2.weight, requires_grad : True
name : backbone.body.model.layer4.2.conv3.weight, requires_grad : True
name : backbone.fpn.inner_blocks.0.0.weight, requires_grad : True
name : backbone.fpn.inner_blocks.0.0.bias, requires_grad : True
name : backbone.fpn.inner_blocks.1.0.weight, requires_grad : True
name : backbone.fpn.inner_blocks.1.0.bias, requires_grad : True
name : backbone.fpn.inner_blocks.2.0.weight, requires_grad : True
name : backbone.fpn.inner_blocks.2.0.bias, requires_grad : True
name : backbone.fpn.layer_blocks.0.0.weight, requires_grad : True
name : backbone.fpn.layer_blocks.0.0.bias, requires_grad : True
name : backbone.fpn.layer_blocks.1.0.weight, requires_grad : True
name : backbone.fpn.layer_blocks.1.0.bias, requires_grad : True
name : backbone.fpn.layer_blocks.2.0.weight, requires_grad : True
name : backbone.fpn.layer_blocks.2.0.bias, requires_grad : True
name : backbone.fpn.extra_blocks.p6.weight, requires_grad : True
name : backbone.fpn.extra_blocks.p6.bias, requires_grad : True
name : backbone.fpn.extra_blocks.p7.weight, requires_grad : True
name : backbone.fpn.extra_blocks.p7.bias, requires_grad : True
name : head.classification_head.conv.0.0.weight, requires_grad : True
name : head.classification_head.conv.0.0.bias, requires_grad : True
name : head.classification_head.conv.1.0.weight, requires_grad : True
name : head.classification_head.conv.1.0.bias, requires_grad : True
name : head.classification_head.conv.2.0.weight, requires_grad : True
name : head.classification_head.conv.2.0.bias, requires_grad : True
name : head.classification_head.conv.3.0.weight, requires_grad : True
name : head.classification_head.conv.3.0.bias, requires_grad : True
name : head.classification_head.cls_logits.weight, requires_grad : True
name : head.classification_head.cls_logits.bias, requires_grad : True
name : head.regression_head.conv.0.0.weight, requires_grad : True
name : head.regression_head.conv.0.0.bias, requires_grad : True
name : head.regression_head.conv.1.0.weight, requires_grad : True
name : head.regression_head.conv.1.0.bias, requires_grad : True
name : head.regression_head.conv.2.0.weight, requires_grad : True
name : head.regression_head.conv.2.0.bias, requires_grad : True
name : head.regression_head.conv.3.0.weight, requires_grad : True
name : head.regression_head.conv.3.0.bias, requires_grad : True
name : head.regression_head.bbox_reg.weight, requires_grad : True
name : head.regression_head.bbox_reg.bias, requires_grad : True
model : DistributedDataParallel(
  (module): RetinaNet(
    (backbone): BackboneWithADNFPN(
      (body): IntermediateLayerGetter(
        (model): ResNet(
          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
          (bn1): FrozenBatchNorm2d(64, eps=1e-05)
          (relu): ReLU(inplace=True)
          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
          (layer1): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(64, eps=1e-05)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(64, eps=1e-05)
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(256, eps=1e-05)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): FrozenBatchNorm2d(256, eps=1e-05)
              )
              (bn1_skip): FrozenBatchNorm2d(64, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(64, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(256, eps=1e-05)
            )
            (1): Bottleneck(
              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(64, eps=1e-05)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(64, eps=1e-05)
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(256, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(64, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(64, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(256, eps=1e-05)
            )
            (2): Bottleneck(
              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(64, eps=1e-05)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(64, eps=1e-05)
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(256, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
          )
          (layer2): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(128, eps=1e-05)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(128, eps=1e-05)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(512, eps=1e-05)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): FrozenBatchNorm2d(512, eps=1e-05)
              )
              (bn1_skip): FrozenBatchNorm2d(128, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(128, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(512, eps=1e-05)
            )
            (1): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(128, eps=1e-05)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(128, eps=1e-05)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(512, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(128, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(128, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(512, eps=1e-05)
            )
            (2): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(128, eps=1e-05)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(128, eps=1e-05)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(512, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
            (3): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(128, eps=1e-05)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(128, eps=1e-05)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(512, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
          )
          (layer3): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): FrozenBatchNorm2d(1024, eps=1e-05)
              )
              (bn1_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(1024, eps=1e-05)
            )
            (1): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(1024, eps=1e-05)
            )
            (2): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(1024, eps=1e-05)
            )
            (3): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
            (4): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
            (5): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
          )
          (layer4): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(512, eps=1e-05)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(512, eps=1e-05)
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(2048, eps=1e-05)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): FrozenBatchNorm2d(2048, eps=1e-05)
              )
              (bn1_skip): FrozenBatchNorm2d(512, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(512, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(2048, eps=1e-05)
            )
            (1): Bottleneck(
              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(512, eps=1e-05)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(512, eps=1e-05)
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(2048, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(512, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(512, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(2048, eps=1e-05)
            )
            (2): Bottleneck(
              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(512, eps=1e-05)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(512, eps=1e-05)
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(2048, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
          )
        )
      )
      (fpn): FeaturePyramidNetwork(
        (inner_blocks): ModuleList(
          (0): Conv2dNormActivation(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (layer_blocks): ModuleList(
          (0-2): 3 x Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (extra_blocks): LastLevelP6P7(
          (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        )
      )
    )
    (anchor_generator): AnchorGenerator()
    (head): RetinaNetHead(
      (classification_head): RetinaNetClassificationHead(
        (conv): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
        )
        (cls_logits): Conv2d(256, 819, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (regression_head): RetinaNetRegressionHead(
        (conv): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
        )
        (bbox_reg): Conv2d(256, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (transform): GeneralizedRCNNTransform(
        Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        Resize(min_size=(800,), max_size=1333, mode='bilinear')
    )
  )
)
#Params :  34014999
33792599
num_skippable_stages : 4
skip_cfg_supernet : [False, False, False, False]
skip_cfg_basenet : [True, True, True, True]
Start training
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
Epoch: [0]  [   0/7329]  eta: 4:32:03  lr: 0.000020  real_losses_super: 2.1130 (2.1130)  real_losses_base: 2.1131 (2.1131)  losses_base: 1.9025 (1.9025)  kd_loss: 0.0074 (0.0074)  time: 2.2273  data: 0.8029  max mem: 9774
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.0.downsample.0.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.1.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv1.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv2.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer1.2.conv3.weight, grad : None, (parameters that did not participate in the forward and backward passes because of no require_grad=True or skip_cfg)
param : module.backbone.body.model.layer2.0.conv1.weight, grad : torch.Size([128, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.0.downsample.0.weight, grad : torch.Size([512, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.1.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.2.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv1.weight, grad : torch.Size([128, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv2.weight, grad : torch.Size([128, 128, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer2.3.conv3.weight, grad : torch.Size([512, 128, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv1.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.0.downsample.0.weight, grad : torch.Size([1024, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.1.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.2.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.3.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.4.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv1.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv2.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer3.5.conv3.weight, grad : torch.Size([1024, 256, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv1.weight, grad : torch.Size([512, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.0.downsample.0.weight, grad : torch.Size([2048, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.1.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv1.weight, grad : torch.Size([512, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv2.weight, grad : torch.Size([512, 512, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.body.model.layer4.2.conv3.weight, grad : torch.Size([2048, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.weight, grad : torch.Size([256, 512, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.weight, grad : torch.Size([256, 1024, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.weight, grad : torch.Size([256, 2048, 1, 1]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.inner_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.layer_blocks.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p6.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.backbone.fpn.extra_blocks.p7.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.weight, grad : torch.Size([819, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.classification_head.cls_logits.bias, grad : torch.Size([819]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.0.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.1.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.2.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.weight, grad : torch.Size([256, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.conv.3.0.bias, grad : torch.Size([256]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.weight, grad : torch.Size([36, 256, 3, 3]), (parameters that participated in the forward and backward passes)
param : module.head.regression_head.bbox_reg.bias, grad : torch.Size([36]), (parameters that participated in the forward and backward passes)
[2024-04-26 22:31:06,015] torch.distributed.run: [WARNING] 
[2024-04-26 22:31:06,015] torch.distributed.run: [WARNING] *****************************************
[2024-04-26 22:31:06,015] torch.distributed.run: [WARNING] Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
[2024-04-26 22:31:06,015] torch.distributed.run: [WARNING] *****************************************
| distributed init (rank 0): env://
| distributed init (rank 1): env://
| distributed init (rank 2): env://
| distributed init (rank 3): env://
Namespace(data_path='/media/data/coco', dataset='coco', weights_path=None, clip_grad_norm=None, model='retinanet_resnet50_adn_fpn', device='cuda', batch_size=4, epochs=13, workers=8, opt='sgd', lr=0.01, momentum=0.9, weight_decay=0.0001, norm_weight_decay=None, lr_scheduler='multisteplr', lr_step_size=8, lr_steps=[8, 11], lr_gamma=0.1, print_freq=20, subpath_alpha=0.7, beta=0.9, output_dir='.', resume='', start_epoch=0, aspect_ratio_group_factor=3, rpn_score_thresh=None, trainable_backbone_layers=None, data_augmentation='hflip', sync_bn=False, test_only=False, use_deterministic_algorithms=False, world_size=4, dist_url='env://', weights=None, weights_backbone='/home/hslee/INU_RISE/02_AdaptiveDepthNetwork/pretrained/resnet50_adn_model_145.pth', amp=False, use_copypaste=False, backend='pil', use_v2=False, rank=0, gpu=0, distributed=True, dist_backend='nccl')
Loading data
loading annotations into memory...
Done (t=8.45s)
creating index...
index created!
loading annotations into memory...
Done (t=0.27s)
creating index...
index created!
Creating data loaders
Using [0, 0.5, 0.6299605249474365, 0.7937005259840997, 1.0, 1.259921049894873, 1.5874010519681991, 2.0, inf] as bins for aspect ratio quantization
Count of instances per bin: [  104   982 24236  2332  8225 74466  5763  1158]
Creating model
Loading weights from /home/hslee/INU_RISE/02_AdaptiveDepthNetwork/pretrained/resnet50_adn_model_145.pth
trainable_backbone_layers : 3
extra_blocks: LastLevelP6P7(
  (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
)
backbone.out_channels : 256
anchor_generator.num_anchors_per_location()[0] : 9
name : backbone.body.model.conv1.weight, requires_grad : False
name : backbone.body.model.layer1.0.conv1.weight, requires_grad : False
name : backbone.body.model.layer1.0.conv2.weight, requires_grad : False
name : backbone.body.model.layer1.0.conv3.weight, requires_grad : False
name : backbone.body.model.layer1.0.downsample.0.weight, requires_grad : False
name : backbone.body.model.layer1.1.conv1.weight, requires_grad : False
name : backbone.body.model.layer1.1.conv2.weight, requires_grad : False
name : backbone.body.model.layer1.1.conv3.weight, requires_grad : False
name : backbone.body.model.layer1.2.conv1.weight, requires_grad : False
name : backbone.body.model.layer1.2.conv2.weight, requires_grad : False
name : backbone.body.model.layer1.2.conv3.weight, requires_grad : False
name : backbone.body.model.layer2.0.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.0.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.0.conv3.weight, requires_grad : True
name : backbone.body.model.layer2.0.downsample.0.weight, requires_grad : True
name : backbone.body.model.layer2.1.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.1.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.1.conv3.weight, requires_grad : True
name : backbone.body.model.layer2.2.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.2.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.2.conv3.weight, requires_grad : True
name : backbone.body.model.layer2.3.conv1.weight, requires_grad : True
name : backbone.body.model.layer2.3.conv2.weight, requires_grad : True
name : backbone.body.model.layer2.3.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.0.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.0.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.0.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.0.downsample.0.weight, requires_grad : True
name : backbone.body.model.layer3.1.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.1.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.1.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.2.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.2.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.2.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.3.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.3.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.3.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.4.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.4.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.4.conv3.weight, requires_grad : True
name : backbone.body.model.layer3.5.conv1.weight, requires_grad : True
name : backbone.body.model.layer3.5.conv2.weight, requires_grad : True
name : backbone.body.model.layer3.5.conv3.weight, requires_grad : True
name : backbone.body.model.layer4.0.conv1.weight, requires_grad : True
name : backbone.body.model.layer4.0.conv2.weight, requires_grad : True
name : backbone.body.model.layer4.0.conv3.weight, requires_grad : True
name : backbone.body.model.layer4.0.downsample.0.weight, requires_grad : True
name : backbone.body.model.layer4.1.conv1.weight, requires_grad : True
name : backbone.body.model.layer4.1.conv2.weight, requires_grad : True
name : backbone.body.model.layer4.1.conv3.weight, requires_grad : True
name : backbone.body.model.layer4.2.conv1.weight, requires_grad : True
name : backbone.body.model.layer4.2.conv2.weight, requires_grad : True
name : backbone.body.model.layer4.2.conv3.weight, requires_grad : True
name : backbone.fpn.inner_blocks.0.0.weight, requires_grad : True
name : backbone.fpn.inner_blocks.0.0.bias, requires_grad : True
name : backbone.fpn.inner_blocks.1.0.weight, requires_grad : True
name : backbone.fpn.inner_blocks.1.0.bias, requires_grad : True
name : backbone.fpn.inner_blocks.2.0.weight, requires_grad : True
name : backbone.fpn.inner_blocks.2.0.bias, requires_grad : True
name : backbone.fpn.layer_blocks.0.0.weight, requires_grad : True
name : backbone.fpn.layer_blocks.0.0.bias, requires_grad : True
name : backbone.fpn.layer_blocks.1.0.weight, requires_grad : True
name : backbone.fpn.layer_blocks.1.0.bias, requires_grad : True
name : backbone.fpn.layer_blocks.2.0.weight, requires_grad : True
name : backbone.fpn.layer_blocks.2.0.bias, requires_grad : True
name : backbone.fpn.extra_blocks.p6.weight, requires_grad : True
name : backbone.fpn.extra_blocks.p6.bias, requires_grad : True
name : backbone.fpn.extra_blocks.p7.weight, requires_grad : True
name : backbone.fpn.extra_blocks.p7.bias, requires_grad : True
name : head.classification_head.conv.0.0.weight, requires_grad : True
name : head.classification_head.conv.0.0.bias, requires_grad : True
name : head.classification_head.conv.1.0.weight, requires_grad : True
name : head.classification_head.conv.1.0.bias, requires_grad : True
name : head.classification_head.conv.2.0.weight, requires_grad : True
name : head.classification_head.conv.2.0.bias, requires_grad : True
name : head.classification_head.conv.3.0.weight, requires_grad : True
name : head.classification_head.conv.3.0.bias, requires_grad : True
name : head.classification_head.cls_logits.weight, requires_grad : True
name : head.classification_head.cls_logits.bias, requires_grad : True
name : head.regression_head.conv.0.0.weight, requires_grad : True
name : head.regression_head.conv.0.0.bias, requires_grad : True
name : head.regression_head.conv.1.0.weight, requires_grad : True
name : head.regression_head.conv.1.0.bias, requires_grad : True
name : head.regression_head.conv.2.0.weight, requires_grad : True
name : head.regression_head.conv.2.0.bias, requires_grad : True
name : head.regression_head.conv.3.0.weight, requires_grad : True
name : head.regression_head.conv.3.0.bias, requires_grad : True
name : head.regression_head.bbox_reg.weight, requires_grad : True
name : head.regression_head.bbox_reg.bias, requires_grad : True
model : DistributedDataParallel(
  (module): RetinaNet(
    (backbone): BackboneWithADNFPN(
      (body): IntermediateLayerGetter(
        (model): ResNet(
          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
          (bn1): FrozenBatchNorm2d(64, eps=1e-05)
          (relu): ReLU(inplace=True)
          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
          (layer1): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(64, eps=1e-05)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(64, eps=1e-05)
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(256, eps=1e-05)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (1): FrozenBatchNorm2d(256, eps=1e-05)
              )
              (bn1_skip): FrozenBatchNorm2d(64, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(64, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(256, eps=1e-05)
            )
            (1): Bottleneck(
              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(64, eps=1e-05)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(64, eps=1e-05)
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(256, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(64, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(64, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(256, eps=1e-05)
            )
            (2): Bottleneck(
              (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(64, eps=1e-05)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(64, eps=1e-05)
              (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(256, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
          )
          (layer2): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(128, eps=1e-05)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(128, eps=1e-05)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(512, eps=1e-05)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): FrozenBatchNorm2d(512, eps=1e-05)
              )
              (bn1_skip): FrozenBatchNorm2d(128, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(128, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(512, eps=1e-05)
            )
            (1): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(128, eps=1e-05)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(128, eps=1e-05)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(512, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(128, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(128, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(512, eps=1e-05)
            )
            (2): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(128, eps=1e-05)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(128, eps=1e-05)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(512, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
            (3): Bottleneck(
              (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(128, eps=1e-05)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(128, eps=1e-05)
              (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(512, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
          )
          (layer3): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): FrozenBatchNorm2d(1024, eps=1e-05)
              )
              (bn1_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(1024, eps=1e-05)
            )
            (1): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(1024, eps=1e-05)
            )
            (2): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(256, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(1024, eps=1e-05)
            )
            (3): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
            (4): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
            (5): Bottleneck(
              (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(256, eps=1e-05)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(256, eps=1e-05)
              (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(1024, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
          )
          (layer4): SkippableSequentialBlocks(
            (0): Bottleneck(
              (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(512, eps=1e-05)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(512, eps=1e-05)
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(2048, eps=1e-05)
              (relu): ReLU(inplace=True)
              (downsample): Sequential(
                (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): FrozenBatchNorm2d(2048, eps=1e-05)
              )
              (bn1_skip): FrozenBatchNorm2d(512, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(512, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(2048, eps=1e-05)
            )
            (1): Bottleneck(
              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(512, eps=1e-05)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(512, eps=1e-05)
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(2048, eps=1e-05)
              (relu): ReLU(inplace=True)
              (bn1_skip): FrozenBatchNorm2d(512, eps=1e-05)
              (bn2_skip): FrozenBatchNorm2d(512, eps=1e-05)
              (bn3_skip): FrozenBatchNorm2d(2048, eps=1e-05)
            )
            (2): Bottleneck(
              (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn1): FrozenBatchNorm2d(512, eps=1e-05)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): FrozenBatchNorm2d(512, eps=1e-05)
              (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (bn3): FrozenBatchNorm2d(2048, eps=1e-05)
              (relu): ReLU(inplace=True)
            )
          )
        )
      )
      (fpn): FeaturePyramidNetwork(
        (inner_blocks): ModuleList(
          (0): Conv2dNormActivation(
            (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (layer_blocks): ModuleList(
          (0-2): 3 x Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (extra_blocks): LastLevelP6P7(
          (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        )
      )
    )
    (anchor_generator): AnchorGenerator()
    (head): RetinaNetHead(
      (classification_head): RetinaNetClassificationHead(
        (conv): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
        )
        (cls_logits): Conv2d(256, 819, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (regression_head): RetinaNetRegressionHead(
        (conv): Sequential(
          (0): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (1): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (2): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
          (3): Conv2dNormActivation(
            (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): ReLU(inplace=True)
          )
        )
        (bbox_reg): Conv2d(256, 36, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
    (transform): GeneralizedRCNNTransform(
        Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        Resize(min_size=(800,), max_size=1333, mode='bilinear')
    )
  )
)
#Params :  34014999
33792599
num_skippable_stages : 4
skip_cfg_supernet : [False, False, False, False]
skip_cfg_basenet : [True, True, True, True]
Start training
Epoch: [0]  [   0/7329]  eta: 4:24:13  lr: 0.000020  real_losses_super: 2.1202 (2.1202)  real_losses_base: 2.1201 (2.1201)  losses_base: 1.9088 (1.9088)  kd_loss: 0.0074 (0.0074)  time: 2.1632  data: 0.8010  max mem: 9774
Epoch: [0]  [  20/7329]  eta: 1:01:37  lr: 0.000220  real_losses_super: 1.9514 (2.0058)  real_losses_base: 1.9518 (2.0059)  losses_base: 1.7577 (1.8062)  kd_loss: 0.0093 (0.0092)  time: 0.4230  data: 0.0056  max mem: 11211
Epoch: [0]  [  40/7329]  eta: 0:55:18  lr: 0.000420  real_losses_super: 2.0004 (2.0283)  real_losses_base: 2.0008 (2.0284)  losses_base: 1.8017 (1.8264)  kd_loss: 0.0086 (0.0093)  time: 0.4022  data: 0.0049  max mem: 11214
Epoch: [0]  [  60/7329]  eta: 0:52:51  lr: 0.000619  real_losses_super: 1.9594 (2.0083)  real_losses_base: 1.9597 (2.0083)  losses_base: 1.7649 (1.8084)  kd_loss: 0.0082 (0.0092)  time: 0.3973  data: 0.0047  max mem: 11214
Epoch: [0]  [  80/7329]  eta: 0:51:39  lr: 0.000819  real_losses_super: 1.9265 (2.0019)  real_losses_base: 1.9268 (2.0019)  losses_base: 1.7348 (1.8026)  kd_loss: 0.0076 (0.0089)  time: 0.4008  data: 0.0052  max mem: 11223
Epoch: [0]  [ 100/7329]  eta: 0:50:43  lr: 0.001019  real_losses_super: 1.9509 (2.0024)  real_losses_base: 1.9514 (2.0024)  losses_base: 1.7570 (1.8030)  kd_loss: 0.0076 (0.0087)  time: 0.3943  data: 0.0051  max mem: 11223
Epoch: [0]  [ 120/7329]  eta: 0:50:02  lr: 0.001219  real_losses_super: 1.9564 (1.9960)  real_losses_base: 1.9554 (1.9960)  losses_base: 1.7605 (1.7972)  kd_loss: 0.0078 (0.0085)  time: 0.3940  data: 0.0049  max mem: 11227
Epoch: [0]  [ 140/7329]  eta: 0:49:30  lr: 0.001419  real_losses_super: 1.9715 (1.9950)  real_losses_base: 1.9710 (1.9950)  losses_base: 1.7747 (1.7964)  kd_loss: 0.0074 (0.0084)  time: 0.3932  data: 0.0049  max mem: 11227
Epoch: [0]  [ 160/7329]  eta: 0:49:02  lr: 0.001618  real_losses_super: 1.9229 (1.9908)  real_losses_base: 1.9225 (1.9908)  losses_base: 1.7310 (1.7926)  kd_loss: 0.0069 (0.0083)  time: 0.3910  data: 0.0049  max mem: 11227
Epoch: [0]  [ 180/7329]  eta: 0:48:35  lr: 0.001818  real_losses_super: 1.9042 (1.9874)  real_losses_base: 1.9045 (1.9875)  losses_base: 1.7148 (1.7896)  kd_loss: 0.0075 (0.0082)  time: 0.3865  data: 0.0053  max mem: 11227
Epoch: [0]  [ 200/7329]  eta: 0:48:11  lr: 0.002018  real_losses_super: 1.9602 (1.9839)  real_losses_base: 1.9620 (1.9840)  losses_base: 1.7667 (1.7864)  kd_loss: 0.0080 (0.0082)  time: 0.3865  data: 0.0047  max mem: 11227
Epoch: [0]  [ 220/7329]  eta: 0:47:55  lr: 0.002218  real_losses_super: 1.9353 (1.9831)  real_losses_base: 1.9354 (1.9833)  losses_base: 1.7433 (1.7858)  kd_loss: 0.0092 (0.0083)  time: 0.3924  data: 0.0047  max mem: 11232
Epoch: [0]  [ 240/7329]  eta: 0:47:35  lr: 0.002418  real_losses_super: 1.8894 (1.9781)  real_losses_base: 1.8887 (1.9784)  losses_base: 1.7010 (1.7814)  kd_loss: 0.0103 (0.0086)  time: 0.3852  data: 0.0051  max mem: 11232
Epoch: [0]  [ 260/7329]  eta: 0:47:21  lr: 0.002617  real_losses_super: 1.9086 (1.9742)  real_losses_base: 1.9091 (1.9746)  losses_base: 1.7195 (1.7780)  kd_loss: 0.0143 (0.0091)  time: 0.3920  data: 0.0046  max mem: 11292
Epoch: [0]  [ 280/7329]  eta: 0:47:07  lr: 0.002817  real_losses_super: 1.8653 (1.9665)  real_losses_base: 1.8694 (1.9674)  losses_base: 1.6871 (1.7720)  kd_loss: 0.0787 (0.0134)  time: 0.3889  data: 0.0048  max mem: 11292
Epoch: [0]  [ 300/7329]  eta: 0:46:57  lr: 0.003017  real_losses_super: 1.7811 (1.9557)  real_losses_base: 1.7876 (1.9573)  losses_base: 1.6191 (1.7636)  kd_loss: 0.1003 (0.0203)  time: 0.3971  data: 0.0044  max mem: 11292
Epoch: [0]  [ 320/7329]  eta: 0:46:44  lr: 0.003217  real_losses_super: 1.7358 (1.9421)  real_losses_base: 1.7341 (1.9434)  losses_base: 1.5667 (1.7515)  kd_loss: 0.0632 (0.0237)  time: 0.3888  data: 0.0042  max mem: 11292
